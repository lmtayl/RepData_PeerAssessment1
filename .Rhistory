seq(1:20)
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf <- if(num_vect<1)
)
tf <- (num_vect<1)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "lisa")
my_name
paste(my_name," ")
paste(my_name,collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
exit
fips <- read.csv("https://www.census.gov/geo/reference/codes/files/st20_ks_cou.txt")
fips
colnames(fips)
colnames(fips) =c("state","state_fp","county_fp","county_name","class_fp")
colnames(fips)
head(fips)
fips <- read.csv("https://www.census.gov/geo/reference/codes/files/st20_ks_cou.txt",colClasses=c("character","character","character","character","character"))
colnames(fips) =c("state","state_fp","county_fp","county_name","class_fp")
head(fips)
class(fips)
paste(fips$state_fp,fips$county_fp)
paste(fips$state_fp,fips$county_fp,sep="")
fips$fips_code <- paste(fips$state_fp,fips$county_fp,sep="")
head(fips)
fips <- read.table("https://www.census.gov/geo/reference/codes/files/st20_ks_cou.txt",colClasses=c("character","character","character","character","character"))
fips <- read.csv("https://www.census.gov/geo/reference/codes/files/st20_ks_cou.txt",colClasses=c("character","character","character","character","character"),header=FALSE)
View(fips)
View(fips)
fips <- read.csv("https://www.census.gov/geo/reference/codes/files/st20_ks_cou.txt",colClasses=c("character","character","character","character","character"),header=FALSE,colnames=c("state","state_fp","county_fp","county_name","class_fp"))
args(read.csv)
#Import state/county FIPS codes from Census.
fips <- read.table("https://www.census.gov/geo/reference/codes/files/st20_ks_cou.txt",
colClasses=c("character","character","character","character","character"),
header=FALSE)
colnames(fips) =c("state","state_fp","county_fp","county_name","class_fp")
fips$fp_code <- paste(fips$state_fp,fips$county_fp,sep="")
#Import state/county FIPS codes from Census.
fips <- read.csv("https://www.census.gov/geo/reference/codes/files/st20_ks_cou.txt",
colClasses=c("character","character","character","character","character"),
header=FALSE)
colnames(fips) =c("state","state_fp","county_fp","county_name","class_fp")
fips$fp_code <- paste(fips$state_fp,fips$county_fp,sep="")
head(fips)
fips_us <- read.csv("https://www.census.gov/geo/reference/codes/files/national_county.txt",
colClasses=c("character","character","character","character","character"))
colnames(fips_us)
fips_us$FIPS <- paste(fips_us$State.ANSI,fips_us$County.ANSI,sep="")
head(fips_us)
View(fips_us)
View(fips_us)
max(fips_us$State.ANSI)
fips_us[3235,]
install.packages(choloplethr)
library(devtools)
install.packages("devtools")
library(devtools)
%*% data
m <- matrix(1:4,2,2)
solve(m) %*% m
solve(m)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rbinom(10,10,0.5)
e <- rnorm(10,0,20)
y <- 0.5 + 2*x + e
plot(x,y)
library(choroplethr)
library(maps)
library(fossil)
library(maptools)
library(Hmisc)
library(devtools)
library(ggplot2)
library(scales)
library(geosphere)
?destPoint
library(nlme)
library(lattice)
xyplot(weight~Time|Du
)
xyplot(weight~Time|Diet,BodyWeight)
?lines()
?lpoints
?print.trellis
?trellis.par.set
library(datasets)
data(airquality)
str(airquality)
library(ggplot2)
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
airquality = transform(airquality,Month=factor(Month))
qplot(Wind,Ozone,data=airquality,facets=.~Month)
qplot(votes,rating,data=movies)
qplot(votes,rating,data=movies) + stats_smooth("loess")
qplot(votes,rating,data=movies) + geom_smooth()
qplot(votes,rating,data=movies,panel=panel.loess
)
qplot(votes,rating,data=movies,smooth="loess")
qplot(votes,rating,data=movies)
qplot(votes,rating,data=movies) + geom_smooth()
qplot(votes,rating,data=movies,panel=panel.loess
)
qplot(votes,rating,data=movies,smooth="loess")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel.line
?panel.xyplot
?panel.axis
?panel.text
?print.trellis
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data=airquaity)
qplot(Wind, Ozone, data=airquality)
library(ggplot2)
qplot(Wind, Ozone, data=airquality)
qplot(Wind, Ozone, data=airquality, facets = . ~ factor(Month))
airquality = transform(airquality,Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets= .~Month)
qplot(votes, rating, data=movies)
gplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data=movies) + geom_smooth()
qplot(votes, rating, data=movies) + stats_smooth("loess")
qplot(votes, rating, data=movies, panel=panel.loess)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
?llines
?lines
?trellis.par.set
library(datasets)
data(airquality)
require(ggplot2)
qplot(Wind, Ozone, data=airquality, geom="smooth")
qplot(Wind, Ozone, data=airquality)
qplot(Wind, Ozone, data=airquality, facets=. ~ factor(Month))
airquality = transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets = . ~ Month)
data(airquality)
qplot(Wind,Ozone,data=airquality,facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes,rating))
print(g)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies, panel = panel.loess)
qplot(votes, rating, data=movies, smooth = "loess")
qplot(votes, rating, data=movies) + stats_smooth("loess")
qplot(votes, rating, data=movies) + geom_smooth()
library(ggplot2)
qplot(votes, rating, data=movies, panel = panel.loess)
qplot(votes, rating, data=movies) + geom_smooth()
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
qplot(votes, rating, data=movies) + geom_smooth()
qplot(votes,rating,data=movies,smooth="loess")
df <- read.csv("./activity/activity.csv")
setwd("C:/Users/Lisa/Documents/Coursera/Reproducible_Research/Data/RepData_PeerAssessment1")
list.files()
df <- read.csv("./activity/activity.csv")
setwd("C:/Users/Lisa/Documents/Coursera/Reproducible_Research/Data/RepData_PeerAssessment1/activity")
getwd()
unzip(".activity")
unzip("./activity")
unzip("./activity",files="activity.csv")
df <- read.csv("./activity.csv")
head(df)
summary(df)
2355/5
24*60/5
2355/288
table(df$interval)
24*60
/5
1440/5
str(df)
total <- tapply(df$steps,df$date,sum)
View(total)
total <- tapply(df$steps,df$date,sum,na.rm=T)
View(total)
str(total)
names(total)
total <- aggregate(df,by="date",FUN=sum,na.rm=T)
total <- aggregate(df,by=c("date"),FUN=sum,na.rm=T)
```
total <- aggregate(df,by=c("date"),FUN=sum,na.rm=T)
total <- aggregate(df,by=list(df$date),FUN=sum,na.rm=T)
str(df)
?aggregate
total <- aggregate(df$steps~df$date,FUN=sum,na.rm=T)
View(df)
View(total)
total <- aggregate(df$steps~df$date,FUN=sum,na.rm=F)
View(total)
total2 <- tapply(df$steps,df$data,sum,na.rm=T)
total2 <- tapply(df$steps,df$date,sum,na.rm=T)
total2 <- as.data.frame(total2)
View(total2)
colnames(total2)
?tapply
ggplot(total, aes(x=steps)) +
geom_histogram() +
ylab("Frequency") +
xlab("Total Steps Taken in a Day")
require(ggplot2)
ggplot(total, aes(x=steps)) +
geom_histogram() +
ylab("Frequency") +
xlab("Total Steps Taken in a Day")
str(total)
head(total)
ggplot(total, aes(x=df$steps)) +
geom_histogram() +
ylab("Frequency") +
xlab("Total Steps Taken in a Day")
ggplot(total2, aes(x=total2)) +
geom_histogram() +
ylab("Frequency") +
xlab("Total Steps Taken in a Day")
total <- aggregate(df$steps~df$date,FUN=sum,na.rm=F)
str(total)
total <- aggregate(df,steps~date,FUN=sum,na.rm=F)
total <- aggregate(df$steps~df$date,FUN=sum,na.rm=F)
str(df)
str(total)
str(total2)
ggplot(total, aes(x=df$steps) +
geom_histogram() +
ylab("Frequency") +
xlab("Total Steps Taken in a Day")
ggplot(total, aes(x=df$steps)) +
geom_histogram() +
ylab("Frequency") +
xlab("Total Steps Taken in a Day")
ggplot(total, aes(x=df$steps)) +
geom_histogram() +
ylab("Frequency") +
xlab("Total Steps Taken in a Day")
summary(total)
is.na(total$df$steps)
is.na(df$steps)
table(is.na(df$steps))
str(total)
head(total)
total$df$date
total$df$steps
names(total)
names(total) <- c("date","steps")
total$date
ggplot(total, aes(x=steps)) +
geom_histogram() +
ylab("Frequency") +
xlab("Total Steps Taken in a Day")
summary(total)
mean(total$steps)
median(total$steps)
mean <- mean(total$steps)
median <- median(total$steps)
str(mean)
str(median)
mean
format(mean, %0.2d)
?format
format(mean,nsmall=2)
format(mean,nsmall=0)
format(mean,nsmall=1)
format(13.7)
format(13.7,nsmall=3)
format(13.7,digits=2)
?round
round(mean)
mean <- round(mean(total$steps))
mean
str(mean)
str(median)
?as.integer
mean <- mean(total$steps)
as.integer(mean)
str(df)
17568/288
int <- aggregate(df$steps~df$interval, mean, na.rm=T)
int <- aggregate(df$steps~as.factor(df$interval), mean, na.rm=T)
int2 <- tapply(df$steps, df$interval, mean, na.rm=tZ)
int2 <- tapply(df$steps, df$interval, mean, na.rm=T)
View(int)
View(int2)
int <- aggregate(df$steps~as.factor(df$interval), mean, na.rm=T)
str(df)
df$interval <- as.factor(df$interval)
int <- aggregate(df$steps~df$interval, mean, na.rm=T)
?aggregate
daily <- aggregate(steps~date,data=df,FUN=sum,na.rm=F)
names(daily)
int <- aggregate(steps~interval,data=df, mean, na.rm=T)
int <- aggregate(steps~interval,data=df, FUN=mean, na.rm=T)
str(df
)
summary(df)
aggregate(steps ~ interval, data=df, mean)
daily <- aggregate(steps~date,data=df,FUN=sum,na.rm=T)
#max <- int[order(int$steps),]
table(is.na(d$steps))
table(is.na(df$steps))
table(is.na(df$steps))
table(is.na(df$steps))[2]
table(is.na(df$steps))[2]
int <- aggregate(steps~interval,data=df, FUN=mean, na.rm=T)
int <- aggregate(steps~interval,data=df, sum, na.rm=T)
int <- aggregate(steps~interval,data=df, mean, na.rm=T)
int <- aggregate(steps~interval,data=df,FUN=mean,na.rm=T)
?aggregate
int <- aggregate(steps~interval,data=df,FUN="mean",na.rm=T)
int <- aggregate(steps~interval,data=df,FUN=sum,na.rm=T)
View(int)
int <- aggregate(steps~interval,data=df,FUN="mean",na.rm=T)
View(int)
91/1.7169811
df <- read.csv("./activity.csv")
int <- aggregate(steps~interval,data=df,FUN="mean",na.rm=T)
geom_line()
ggplot(int, aes(x=interval, y=steps)) +
geom_line()
ggplot(int, aes(x=interval, y=steps)) +
geom_line() +
ylab("Average Steps Taken") +
xlab("5-Minute Interval") +
theme_bw()
max <- int[order(int$steps),]
max
max <- int[order(-int$steps),]
head(max)
max[1]
max[1,2]
ggplot(int) +
geom_line() +
ylab("Average Steps Taken") +
xlab("5-Minute Interval") +
theme_bw()
ggplot(int, aes(x=interval)) +
geom_line() +
ylab("Average Steps Taken") +
xlab("5-Minute Interval") +
theme_bw()
ggplot(int, aes(x=interval, y=steps)) +
geom_line() +
ylab("Average Steps Taken") +
xlab("5-Minute Interval") +
theme_bw()
ggplot(int, aes(x=interval, y=steps)) +
geom_line() +
ylab("Average Steps Taken") +
xlab("5-Minute Interval") +
theme_bw()
int <- aggregate(steps~interval,data=df,FUN="mean",na.rm=T)
ggplot(int, aes(x=interval, y=steps)) +
geom_line() +
ylab("Average Steps Taken") +
xlab("5-Minute Interval") +
theme_bw()
str(int)
line(int$steps~int$interval)
lines(int$steps~int$interval)
plot(int$steps,int$inteveral)
plot(int$steps,int$inteveral,type="l")
plot(int$steps,int$inteveral,type="l",xlab="Interval",ylab="Average Steps Taken")
plot(int$interval,int$steps,type="l",xlab="Interval",ylab="Average Steps Taken")
head(int)
df2 <- merge(df,int,by=c("interval"))
head(df2)
last(int)
tail(int)
tail(df2)
df2$steps <- ifelse(!is.na(df$steps.x),df$steps.x,df$steps.y)
df2$steps <- ifelse(!is.na(df2$steps.x),df2$steps.x,df2$steps.y)
```
head(df2)
df2[is.na(df2$steps.x),]
tail(df12)
tail(df2)
head(df2,100)
df2 <- subset(df2,select=c("interval","date","steps"))
df2[90:100,]
daily2 <- aggregate(steps~date,data=df2,FUN=sum)
ggplot(daily2, aes(x=steps)) +
geom_histogram() +
ylab("Frequency") +
xlab("Total Steps Taken in a Day") +
theme_bw()
summary(daily12)
summary(daily2)
mean2 <- mean(daily2$steps)
median2 <- median(daily2$steps)
mean2
median2
?weekdays
weekdays(as.Date(df2$date))
table(weekdays(as.Date(df2$date)))
2304-2592
df2$weekend <- ifelse((weekdays(as.Date(df2$date))=="Saturday" | weekdays(as.Date(df2$date))=="Sunday"),"Weekend","Weekday")
table(df2$weekend)
2304*2
2592*5
int2 <- aggregate(steps~interval,data=df2,FUN="mean")
head(int2)
int2 <- aggregate(steps, by=list("interval","weekend",data=df2,FUN="mean")
)
int2 <- aggregate(df2, by=list("interval","weekend",FUN="mean"))
int2 <- aggregate(df2, by=list("interval","weekend"),FUN="mean")
int2 <- aggregate(steps~interval + weekend,data=df2,FUN="mean")
head(int2)
int2[int2$interval==0,]
str(int2)
ggplot(int2, aes(x=interval, y=steps)) +
geom_line() +
facet_grid(weekend ~ .) +
#  guides(fill=F) +
ylab("Average Steps Taken") +
xlab("Interval") +
theme_bw()
str(int)
max <- int[order(-int$steps),][1,]
max
df2 <- merge(df,int,by=c("interval"))
df2$steps <- ifelse(!is.na(df2$steps.x),df2$steps.x,df2$steps.y)
daily2 <- aggregate(steps~date,data=df2,FUN=sum)
daily2b <- aggregate(steps.x~date,data=df2,FUN=sum,na.rm=T)
head(daily2)
head(daily2b)
ggplot(daily, aes(x=steps)) +
geom_histogram() +
ylab("Frequency") +
xlab("Total Steps Taken in a Day") +
theme_bw()
